// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: telegram.sql

package persist

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const findTelegramPeers = `-- name: FindTelegramPeers :many
SELECT
    id,
    chat_name
FROM
    telegram_peer
WHERE
    enabled
`

type FindTelegramPeersRow struct {
	ID       int64
	ChatName string
}

func (q *Queries) FindTelegramPeers(ctx context.Context) ([]FindTelegramPeersRow, error) {
	rows, err := q.db.Query(ctx, findTelegramPeers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindTelegramPeersRow
	for rows.Next() {
		var i FindTelegramPeersRow
		if err := rows.Scan(&i.ID, &i.ChatName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findTelegramTopicDescription = `-- name: FindTelegramTopicDescription :one
SELECT
    description
FROM
    telegram_topic
WHERE
    peer_id = $1
    AND id = $2
`

type FindTelegramTopicDescriptionParams struct {
	PeerID int64
	ID     int32
}

func (q *Queries) FindTelegramTopicDescription(ctx context.Context, arg FindTelegramTopicDescriptionParams) (string, error) {
	row := q.db.QueryRow(ctx, findTelegramTopicDescription, arg.PeerID, arg.ID)
	var description string
	err := row.Scan(&description)
	return description, err
}

const saveTelegramMessage = `-- name: SaveTelegramMessage :exec
INSERT INTO
    telegram_message (peer_id, topic_id, message)
VALUES
    ($1, $2, $3)
`

type SaveTelegramMessageParams struct {
	PeerID  int64
	TopicID pgtype.Int4
	Message string
}

func (q *Queries) SaveTelegramMessage(ctx context.Context, arg SaveTelegramMessageParams) error {
	_, err := q.db.Exec(ctx, saveTelegramMessage, arg.PeerID, arg.TopicID, arg.Message)
	return err
}

const saveTelegramTopic = `-- name: SaveTelegramTopic :exec
INSERT INTO
    telegram_topic (id, peer_id, title, description)
VALUES
    ($1, $2, $3, $4) ON conflict (id, peer_id) DO
UPDATE
SET
    title = excluded.title,
    description = excluded.description
`

type SaveTelegramTopicParams struct {
	ID          int32
	PeerID      int64
	Title       string
	Description string
}

func (q *Queries) SaveTelegramTopic(ctx context.Context, arg SaveTelegramTopicParams) error {
	_, err := q.db.Exec(ctx, saveTelegramTopic,
		arg.ID,
		arg.PeerID,
		arg.Title,
		arg.Description,
	)
	return err
}
