// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: llm.sql

package persist

import (
	"context"
)

const findChatMessages = `-- name: FindChatMessages :one
SELECT
    messages
FROM
    llm_chat
WHERE
    telegram_peer_id = $1
`

func (q *Queries) FindChatMessages(ctx context.Context, telegramPeerID int64) ([]byte, error) {
	row := q.db.QueryRow(ctx, findChatMessages, telegramPeerID)
	var messages []byte
	err := row.Scan(&messages)
	return messages, err
}

const saveChatMessages = `-- name: SaveChatMessages :exec
INSERT INTO
    llm_chat(telegram_peer_id, messages)
VALUES
    ($1, $2) ON conflict (telegram_peer_id) DO
UPDATE
SET
    messages = excluded.messages
`

type SaveChatMessagesParams struct {
	TelegramPeerID int64
	Messages       []byte
}

func (q *Queries) SaveChatMessages(ctx context.Context, arg SaveChatMessagesParams) error {
	_, err := q.db.Exec(ctx, saveChatMessages, arg.TelegramPeerID, arg.Messages)
	return err
}
